인증 / 권한
인증 : 사용자가 누구인지 (주로 아이디/패스워드 사용) 로그인 하는 과정, 사용자의 신원 확인.
권한 : 사용자가 관리자인지 유저인지 게시물을 삭제할 권한이 있는지 등 사용자가 할 수 있는 행동 확인.

# Rule 1
절대 데이터베이스에 패스워드를 문자 그대로 저장하지 마라.
대신에 해시 함수로 암호를 처리하여 그 결과를 데이터베이스에 저장.
해시 함수 : 임의 크기의 데이터 입력 -> 고정된 크기의 데이터 출력. 출력값은 모두 사용하는 메모리가 같음.
비밀번호 'lizard987'을 받으면 데이터베이스에 저장할 때 썼던 똑같은 해시 함수를 사용하여 이를 비교.
해시 함수는 여러 함수의 넒은 집합. 종류, 쓰임새가 다양함.

<암호화 해시 함수>
1. 변환이 불가능한 단방향 함수.
해시 암호를 역추적해 입력 값을 얻는 것이 불가능 함. (한 숫자를 절대값으로 변환 후 -Math.abs() 그것이 양인지 음인지 알 수 없는 것처럼)

2. 입력 값에 작은 변화가 있을 때 출력 값이 크게 변화.

3. 결정론성 - 동일한 입력 값이 항상 값은 값으로 출력. (Deterministic Algorithm)
처음 저장한 해시 암호와 대조해야하므로.

4. 동일한 두 출력 값이 도출되는 충돌이 거의 절대 일어나서는 안됨.

5. 암호화 해시 함수는 고의적으로 느린 함수를 사용.
빠른 해시 함수를 사용하면 훨씬 쉽게 침입당할 수 있음.


<솔트>
암호를 해시할 때 암호를 역설계하거나 알아내는 것을 어렵게 하기 위해 하는 추가적인 단계
암호를 해시하면서 임의의 값을 넣음. (원래 비번이 findingNimo 라면 findingNimoLOL - 랜덤 솔트 LOL을 해시한 다음 그 결과 값을 데이터베이스에 저장) 솔트 값도 따로 저장하여 나중에 로그인할 때 솔트를 추가한 값을 해시해서 대조.

솔트 사용 이유 - 암호화 해시 함수는 그 수가 매우 적어 결과값만 보고도 무엇을 사용했는지 유추 가능. (Bcrypt...) 흔한 비밀번호나 모든 가능한 수의 비밀번호를 해시한 테이블을 이용해 데이터베이스에 저장되어 있는 해시 값과 비교 대조 후 원래의 비밀번호를 역추적하는 것을 방지하기 위해 사용.
또한 각 사용자에게 다른 솔트를 발급하면 각자 다른 해시 출력 값이 나와 해시 출력 값을 보고 여러 사람들이 같은 암호를 사용한다는 것을 모르게 하기 위함.

사람들은 동일한 패스워드를 여러 웹사이트에 자주 사용하고 또한 여러 사람들이 같은 흔한 패스워드를 사용함. 동일한 입력 값으로 동일한 출력 값을 얻는데 무작위로 생성된 솔트는 아주 다른 출력 값을 만들어내 해커들이 미리 계산해둔 조회 테이블을 사용할 수 없게 만듬. (솔트 - 무작위 값을 알아낼 수 없으므로)


